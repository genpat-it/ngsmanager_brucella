manifest {
  name = 'ngsmanager'
  author = 'bioinformatica@izs.it'
  homePage = ''
  description = ''
  mainScript = 'main.nf'
  nextflowVersion = ''
  version = '1.0.0'
  defaultBranch = 'master'
}

def MAX_MEMORY = System.getenv("NXF_EXECUTOR_MEMORY") ?: '200.GB'
def MAX_CPU = System.getenv("NXF_EXECUTOR_CPU") ?: '64'

params {
  // Defaults only, expecting to be overwritten
  max_memory = MAX_MEMORY
  max_cpus = MAX_CPU
  max_time = '24h'
  outdir = './results'
  tracedir = "./pipeline_info"
  inputdir ='/bioinfonas/cmp'
  report_dir = "./pipeline_info"
  timeline_dir = "./pipeline_info"
  dag_dir = "./pipeline_info"
  assets_dir = "${projectDir}/assets"
  hosts_dir = '/biowork/databases/REFERENCES/host'
  local_registry="nexus-prod.izs.intra:9091"
  use_run_date = false
  always_retry = false
  max_retries = 2
  full_output = false
  error_strategy_after_retries = 'finish'
  check_file_existence = true
  step_1PP_trimming__chopper__quality = 10
  step_1PP_trimming__chopper__minlength = 500
  step_2AS_hybrid__unicycler__mode = 'normal'
  step_2AS_mapping__ivar___q = 20
  step_2AS_denovo__flye__genome_size = ''
  step_2AS_denovo__flye__meta = false
  step_3TX_species__blast___blastdb = "/mnt/data/databases/PROGRAMS/BLAST/references/blastdb"
  step_3TX_species__blast___num_threads = 64
  step_4AN_genes__pharokka___db = "/bioinfonas/databases/PROGRAMS/pharokka"
  step_4AN_genes__pharokka___predictor = "phanotate"
  step_4TY_lineage__snapperdb___skip_update = false
  step_4TY_lineage__westnile___threshold = 0.85
  step_4TY_lineage__westnile___references = "westnile_lineage_references.json"
  step_4TY_MLST__mlst___excluded_schemas = 'ecoli,abaumannii,vcholerae_2,flaA'
  step_4TY_distance__mash__db_name = 'brucella.msh'
  step_4TY_distance__mash__db_path = '/mnt/biowork/databases/PROGRAMS/mash'
  module_obitools__trimmomatic_min_len = 50
  module_obitools__trimmomatic_sliding_window = '10:20'
  module_obitools__illuminapairedend_score_min = '40'
  module_obitools__obiclean_d = '1'
  module_obitools__obiclean_r = '0.05'
  module_obitools__blast_evalue = '0.0001'
  module_obitools__blast_identity= '0.97'
  module_obitools__db_path = '/biowork/databases/genpat/module_obitools'
  module_qc_quast__summary = false
  multi_pangenome__panaroo__clean_mode = 'strict'
  multi_pangenome__panaroo__threshold = '0.95'
  multi_pangenome__panaroo__family_threshold = '0.7'
  multi_pangenome__panaroo__len_dif_percent = '0.98'
  multi_pangenome__panaroo__threads = 32
  multi_pangenome__panaroo__extra = ''
  multi_clustering__augur__align_extra = ''
  multi_clustering__augur__ancestral_extra = ''
  multi_clustering__augur__ancestral_inference = 'joint'
  multi_clustering__augur__export_extra = ''
  multi_clustering__augur__refine_coalescent = 'opt'
  multi_clustering__augur__refine_extra = ''
  multi_clustering__augur__traits_columns = 'Provincia Comune'
  multi_clustering__augur__traits_extra = ''
  multi_clustering__augur__translate_extra =''
  multi_clustering__augur__tree_method = 'iqtree'
  multi_clustering__augur__tree_extra = ''
  multi_clustering__reportree__input = 'alleles'
  multi_clustering__reportree__sample_of_interest = ''
  multi_clustering__reportree__zoom_cluster_of_interest = ''
  multi_clustering__reportree__thr = ''
  multi_clustering__reportree__extra = ''
  multi_clustering__reportree__report_threshold = ''
  multi_clustering__reportree__HC_threshold = ''
  multi_clustering__reportree__loci_called = ''
  multi_clustering__reportree__site_inclusion = ''
  multi_clustering__reportree__summary_columns = 'CC,ST,Provincia,category,iso_week,iso_year,first_seq_date,last_seq_date,timespan_days'
  multi_clustering__reportree__summary_date_aliases = 'Sampling Date|DataPrelievo'
  multi_clustering__reportree__summary_sample_column = 'CMP'
  multi_clustering__reportree__summary_geo_column = 'Comune'
  multi_clustering__cfsan__version = '2.0.2'
  skip_checkm = true
  skip_bestref_mapping = false
  raw_reads_threshold = 0
  segmented_mapping = false
  incompatible_step_warning = true
  ncbi_max_download_assembly = '10M'
  ncbi_max_download_sra = '3G'
  allelic_profile_encoding = 'crc32'
}

profiles {
    run    { includeConfig 'profiles/run.config'    }
    genpat { includeConfig 'profiles/genpat.config' }
    scratch { includeConfig 'profiles/scratch.config' }
    cohesive { includeConfig 'profiles/cohesive.config' }
    test { includeConfig 'profiles/test.config' }
}

process {
  errorStrategy = { getErrorStrategy(task) }
  maxRetries = params.max_retries
  maxErrors = '-1'
  shell = ['/bin/bash', '-euo', 'pipefail']
  memory = params.max_memory
  time = params.max_time
}

executor {
	name = 'local'
	cpus = params.max_cpus
	memory = params.max_memory
}

/* docker */
env.LOCAL_REGISTRY = params.local_registry
docker {
    enabled = true
    runOptions = "-u \$(id -u):\$(id -g) --memory-swappiness 0 --cpus ${params.max_cpus}"
    fixOwnership = true
}

/* reports */
def report_suffix = params.containsKey('report_suffix') ? (params.report_suffix ?: '') : '_' + new java.text.SimpleDateFormat("yyMMdd.HHmmss").format(new Date())
def report_prefix = params.containsKey('report_prefix') ? (params.report_prefix ?: '') : ''

timeline {
  enabled = true
  file = "${params.timeline_dir}/${report_prefix}timeline${report_suffix}.html"
}
report {
  enabled = true
  file = "${params.report_dir}/${report_prefix}report${report_suffix}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/${report_prefix}trace${report_suffix}.txt"
  fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,workdir,scratch,error_action'
}
dag {
  // GraphViz installation required
  enabled = false
  file = "${params.dag_dir}/${report_prefix}dag${report_suffix}.svg"
}

def getErrorStrategy(task) { 
  try {
      if (!task) {
          // should NOT happen
          return params.error_strategy_after_retries
      }
      if (task.getMemory() == params.max_memory && task.getTime() == params.max_time) {
          // already using max memory and max time: no need to retry
          return params.error_strategy_after_retries
      }
      // task.exitStatus > 255 -> process timeout
      def result = (task.exitStatus in [143,137,104,134,139] || params.always_retry) && (task.attempt <= params.max_retries)
      return result ? 'retry' : params.error_strategy_after_retries
  } catch (t) {
        println "unexpected exception: ${t.asString()}"
        return  params.error_strategy_after_retries
  }
}